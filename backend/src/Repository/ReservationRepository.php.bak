<?php

namespace App\Repository;

use App\Entity\Reservation;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

// Repository RESERVATION
class ReservationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Reservation::class);
    }

    // Appel dans le compte USER, pour l'historique des réservations
	// Méthode pour compter le nombre de réservations avec statut_id = 3 (TERMINE PAYE)
    public function findByUtilisateur(int $userId): array
    {
        return $this->createQueryBuilder('r')
            ->andWhere('r.utilisateur = :userId') // Réservations réalisées par l'utilisateur comme passager
            ->setParameter('userId', $userId)
            ->orderBy('r.dateReservation', 'DESC') // Tri décroissant pour afficher les dates les plus récentes en haut
            ->getQuery()
            ->getResult();
    }


    // Appel dans le compte EMPLOYE, pour récupérer les covoiturages signalés
	// Méthode pour compter récupérer les réservations signalées avec statut_id = 4 (TERMINÉ SIGNALÉ)
	public function findByAvisNegatifs(): array
	{
    return $this->createQueryBuilder('r')
        // Sélectionner les informations nécessaires
        ->select(
            'a.avis_id', 
            'a.commentaire', 
            'a.note', 
            'a.dateCreationCommentaire', 
            'u.pseudo AS auteurPseudo', 
            'u.email AS auteurEmail', 
            'c.villeDepart', 
            'c.villeArrivee', 
            'c.date_debut', 
            'c.heure_depart', 
            'chauffeur.pseudo AS chauffeurPseudo', 
            'chauffeur.email AS chauffeurEmail'
        )
        ->leftJoin('App\Entity\Avis', 'a', 'WITH', 'a.covoiturage = r.reservationId')
        ->leftJoin('a.auteur', 'u')  // Récupérer l'utilisateur (auteur de l'avis)
        ->leftJoin('r.covoiturage', 'c')  // Récupérer le covoiturage associé à la réservation
        ->leftJoin('c.chauffeur', 'chauffeur')  // Le chauffeur est un utilisateur lié au covoiturage
        ->where('r.statutReservation = :statutNegatif')
        ->setParameter('statutNegatif', 4)
        ->getQuery()
        ->getResult();
	}


    // Appel dans le compte ADMIN, pour le cumul de crédits
	// Méthode pour compter le nombre de réservations avec statut_id = 3 (TERMINE PAYE)
	public function countPaidReservations()
	{
		return $this->createQueryBuilder('r')
			->select('COUNT(r.reservationId)')  // Compter le nombre de réservations
			->andWhere('r.statutReservation = :statut')  // Comparer le statut avec 3
			->setParameter('statut', 3)  // statut_id = 3 (TERMINE PAYE)
			->getQuery()
			->getSingleScalarResult();  // Retourne le résultat sous forme de valeur simple
	}
	
}
