import React, { useEffect, useState } from 'react';
import DashboardChart from '../context/DashboardChart';
// import jwtDecode from 'jwt-decode'; // Non utilisé, je commente
// import { useAuth } from '../context/authToken'; // Non utilisé, je commente

const FormulaireCreateEmploye = () => {
  const [email, setEmail] = useState('');
  const [pseudo, setPseudo] = useState('');
  const [password, setPassword] = useState('');
  const [createMessage, setCreateMessage] = useState('');
  const [suspendMessage, setSuspendMessage] = useState('');
  const [error, setError] = useState(null);
  const [users, setUsers] = useState([]);
  const [selectedUserId, setSelectedUserId] = useState('');
  const [totalCredits, setTotalCredits] = useState(0);

  // États de chargement spécifiques
  const [loadingUsers, setLoadingUsers] = useState(false);
  const [loadingCredits, setLoadingCredits] = useState(false);

  // État global de chargement
  const loading = loadingUsers || loadingCredits;

  const token = localStorage.getItem('jwt_token');

  // Récupération des utilisateurs
  useEffect(() => {
    const fetchUsers = async () => {
      setLoadingUsers(true);
      try {
        const response = await fetch('https://127.0.0.1:8000/api/liste_user', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        });

        const data = await response.json();

        if (response.ok) {
          setUsers(data);
        } else {
          setError(data.message || 'Erreur inconnue');
        }
      } catch (err) {
        setError('Erreur de connexion au serveur');
      } finally {
        setLoadingUsers(false);
      }
    };

    fetchUsers();
  }, [token]);

  // Récupération du total des crédits
  useEffect(() => {
    const fetchTotalCredits = async () => {
      setLoadingCredits(true);
      try {
        const response = await fetch('https://127.0.0.1:8000/api/total_credits', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        });

        const data = await response.json();

        if (response.ok) {
          setTotalCredits(data.totalCredits);
        } else {
          setError(data.message || 'Erreur inconnue');
        }
      } catch (err) {
        setError('Erreur de connexion au serveur');
      } finally {
        setLoadingCredits(false);
      }
    };

    fetchTotalCredits();
  }, [token]);

  // Fonction pour nettoyer les messages après un délai
  const clearMessage = (setter) => {
    setTimeout(() => {
      setter('');
    }, 10000); // Nettoie le message après 10 secondes
  };

  // Création d'un employé
  const handleCreateUserSubmit = async (e) => {
    e.preventDefault();

    const data = {
      email: email,
      pseudo: pseudo,
      password: password,
    };

    try {
      const response = await fetch('https://127.0.0.1:8000/api/create_employe', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      });

      const result = await response.json();
      if (response.ok) {
        setCreateMessage('Utilisateur créé avec succès');
        clearMessage(setCreateMessage);
      } else {
        setCreateMessage(result.error || 'Une erreur est survenue');
        clearMessage(setCreateMessage);
      }
    } catch (error) {
      setCreateMessage('Erreur de connexion au serveur');
      clearMessage(setCreateMessage);
    }
  };

  // Suspension d'un employé
  const handleSuspendUserSubmit = async (e) => {
    e.preventDefault();

    if (!selectedUserId) {
      setSuspendMessage('Veuillez sélectionner un utilisateur.');
      clearMessage(setSuspendMessage);
      return;
    }

    try {
      const response = await fetch('https://127.0.0.1:8000/api/suspend_user', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id: selectedUserId }),
      });

      const data = await response.json();

      if (response.ok) {
        setSuspendMessage('Utilisateur suspendu avec succès.');
        clearMessage(setSuspendMessage);
      } else {
        setSuspendMessage(data.error || 'Erreur inconnue');
        clearMessage(setSuspendMessage);
      }
    } catch (err) {
      setSuspendMessage('Erreur de connexion au serveur');
      clearMessage(setSuspendMessage);
    }
  };

  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: '100vh' }}>
        <h2>Chargement en cours...</h2>
      </div>
    );
  }

  return (
    <div className="row justify-content-center">
      <div className="col col-lg-8 w-100">
        <div className="card shadow rounded-4 p-4">
          <h1 className="text-center mb-4">⚙️ Espace Admin</h1>

          {/* Création d'un compte Employé */}
          <div className="card shadow rounded-4 p-4 mb-3">
            <h5 className="text-secondary mb-3">➕ Créer un nouveau compte employé</h5>

            <form onSubmit={handleCreateUserSubmit}>
              <div className="mb-3">
                <label htmlFor="email" className="form-label">Adresse email</label>
                <input
                  type="email"
                  className="form-control"
                  id="email"
                  name="email"
                  placeholder="email@exemple.com"
                  required
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                />
              </div>

              <div className="mb-3">
                <label htmlFor="pseudo" className="form-label">Pseudo</label>
                <input
                  type="text"
                  className="form-control"
                  id="pseudo"
                  name="pseudo"
                  placeholder="Nom d'utilisateur"
                  required
                  value={pseudo}
                  onChange={(e) => setPseudo(e.target.value)}
                />
              </div>

              <div className="mb-4">
                <label htmlFor="password" className="form-label">Mot de passe</label>
                <input
                  type="password"
                  className="form-control"
                  id="password"
                  name="password"
                  placeholder="••••••••"
                  required
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                />
              </div>

              <button type="submit" className="btn btn-success w-100">
                ➕ Créer l’employé
              </button>
            </form>

            {createMessage && (
              <div className={`alert mt-3 ${createMessage.toLowerCase().includes('erreur') ? 'alert-danger' : 'alert-success'}`}>
                {createMessage}
              </div>
            )}
          </div>

          <hr />

          {/* Suspension d'un compte */}
          <div className="card shadow rounded-4 p-4 mb-3 mt-3">
            <h5 className="text-secondary mb-3">❌ Suspendre un compte Ecoride</h5>

            <form onSubmit={handleSuspendUserSubmit}>
              <div className="mb-3">
                <label htmlFor="userSelect" className="form-label">Sélectionnez un utilisateur</label>
                <select
                  id="userSelect"
                  className="form-select"
                  value={selectedUserId}
                  onChange={(e) => setSelectedUserId(e.target.value)}
                  required
                >
                  <option value="">Sélectionnez un utilisateur</option>
                  {users.map((user) => (
                    <option key={user.id} value={user.id}>
                      {user.pseudo} - {user.email} (Rôle: {user.role}, Privilège: {user.privilege})
                    </option>
                  ))}
                </select>
              </div>

              <button type="submit" className="btn btn-danger w-100">
                🗑️ Inactiver le compte
              </button>
            </form>

            {suspendMessage && (
              <div className={`alert mt-3 ${suspendMessage.toLowerCase().includes('erreur') ? 'alert-danger' : 'alert-success'}`}>
                {suspendMessage}
              </div>
            )}
          </div>

          {/* Affichage du total des crédits accumulés */}
          <div className="card shadow rounded-4 p-4 mb-3 mt-3">
            <h5 className="text-secondary mb-3">💰 Gain de crédits total</h5>
            <label htmlFor="crédits_plateforme" className="form-label">
              Total des crédits accumulés par la plateforme :
            </label>
            <button type="button" className="btn btn-success w-100">{totalCredits} crédits</button>
          </div>

          <hr />

          <hr />

          {/* Section graphique */}
          <div className="card shadow rounded-4 p-4 mt-3">
            <h5 className="text-secondary mb-3">📈 Statistiques de trajets</h5>
            <DashboardChart />
          </div>
        </div>
      </div>
    </div>
  );
};

export default FormulaireCreateEmploye;
