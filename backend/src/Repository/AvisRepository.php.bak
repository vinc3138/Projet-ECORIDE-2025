<?php

namespace App\Repository;

use App\Entity\Avis;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

// Repository AVIS
class AvisRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Avis::class);
    }


    // Non appelée actuellement, pour l'esemble des avis liés à un seul covoiturage
	// Méthode liée à l'ID du covoiturage
    public function findByCovoiturage(int $covoiturageId): array
    {
        return $this->createQueryBuilder('a')
            ->andWhere('a.covoiturage = :covoiturageId')
            ->setParameter('covoiturageId', $covoiturageId)
            ->orderBy('a.dateCreationCommentaire', 'DESC')
            ->getQuery()
            ->getResult();
    }

    // Appel dans le compte USER, pour l'historique des réservations (liste des avis liés au chauffeur)
	// Méthode pour afficher les commentaires avec le statut_id = 4 (VALIDE)
	public function findByChauffeur(\App\Entity\Utilisateur $chauffeur): array
	{
		return $this->createQueryBuilder('a')
			->join('a.covoiturage', 'c')
			->andWhere('c.chauffeur = :chauffeur')
			->andWhere('a.statut_avis = :statutValide')
			->setParameter('chauffeur', $chauffeur)
			->setParameter('statutValide', 4)
			->getQuery()
			->getResult();
	}


	// Appel dans le compte EMPLOYE, pour afficher les avis à valider
	// Méthode pour afficher les commentaires avec le statut_id = 3 (À VALIDER)
	public function findByAvisAvalider(): array
	{
    return $this->createQueryBuilder('a')
        ->select('a.avis_id', 'a.commentaire', 'a.note', 'a.dateCreationCommentaire', 'u.pseudo')
        ->leftJoin('a.auteur', 'u')
        ->where('a.statut_avis = :statutAvalider')
        ->setParameter('statutAvalider', 3)
        ->getQuery()
        ->getResult();
	}


    // Appel dans le compte EMPLOYE, pour valider ou refuser les avis des passagers
	// Méthode pour mettre à jour les commentaires avec le statut_id = 4 (VALIDÉ) ou avec le statut_id = 5 (REFUSÉ) selon le choix de l'employé
	public function updateAvisStatus(int $avisId, string $action): void
	{
		// Récupérer l'avis par son ID
		$avis = $this->find($avisId);

		// Vérifier que l'avis existe
		if ($avis) {
			// Trouver l'ID du statut correspondant à l'action
			$statutId = null;

			if ($action === 'Validé') {
				// Statut 4 pour "Validé"
				$statutId = 4;
				$avis->setCommentaire("Avis validé par l'employé.");
			} elseif ($action === 'Refusé') {
				// Statut 5 pour "Refusé"
				$statutId = 5;
				$avis->setCommentaire("Avis refusé par l'employé.");
			}

			if ($statutId !== null) {
				// Affecter l'ID du statut directement
				$avis->setStatutAvis($statutId);
				// Sauvegarder les modifications dans la base de données
				$this->getEntityManager()->flush();
			} else {
				throw new \Exception('Action inconnue.');
			}
		} else {
			throw new \Exception('Avis non trouvé.');
		}
	}



}