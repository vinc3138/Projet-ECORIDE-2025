const express = require('express');
const cors = require('cors');
const cron = require('node-cron');
const { MongoClient } = require('mongodb');

const { genererKpisQuotidiens } = require('./scripts/genererKpisQuotidiens');
const { enregistrerCovoiturage } = require('./scripts/enregistrerCovoiturage');

const app = express();
const PORT = 8000;

const uri = 'mongodb+srv://administrateur:STUDI2025!@cluster0.ygqxdsj.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';
const client = new MongoClient(uri);

app.use(cors());
app.use(express.json());

// Route racine
app.get('/', (req, res) => {
  res.send('Bienvenue sur le serveur de test !');
});

// Simuler un utilisateur
const user = {
  email: 'employe@employe.fr',
  password: 'STUDi2025!',
  privilege: 'EMPLOYE',
  pseudo: 'EmployeTest'
};

// Endpoint login fictif
app.post('/api/login', (req, res) => {
  const { username, password } = req.body;
  if (username === user.email && password === user.password) {
    return res.json({
      message: 'Connexion r√©ussie !',
      token: 'fake-jwt-token-123456',
      user: {
        email: user.email,
        privilege: user.privilege,
        pseudo: user.pseudo,
      }
    });
  } else {
    return res.status(401).json({ message: 'Email ou mot de passe invalide.' });
  }
});

// Route API pour les KPI journaliers
app.get('/api/kpi/journalier', async (req, res) => {
  try {
    const db = client.db('plateforme_covoiturage');
    const kpis = db.collection('kpi_journalier');

    const start = req.query.start;
    const end = req.query.end;

    const query = {};
    if (start && end) {
      query.date = { $gte: start, $lte: end };
    }

    const result = await kpis.find(query).sort({ date: 1 }).toArray();
    res.json(result);
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des KPIs :", error);
    res.status(500).json({ error: "Erreur serveur" });
  }
});

// D√©marrage principal
async function demarrerServeur() {
  try {
    await client.connect(); // Connexion MongoDB persistante
    console.log('Connexion √† MongoDB √©tablie.');

    console.log('D√©but de la synchronisation SQL -> Mongo...');
    await enregistrerCovoiturage();
    console.log('Synchronisation SQL -> Mongo r√©ussie.');

    console.log('G√©n√©ration des KPIs...');
    await genererKpisQuotidiens();
    console.log('KPIs g√©n√©r√©s avec succ√®s !');

    // D√©marrage du serveur
    app.listen(PORT, () => {
      console.log(`üöÄ Serveur d√©marr√© sur http://localhost:${PORT}`);
    });

    // T√¢che cron (d√©commenter si n√©cessaire)
    cron.schedule('0 0 * * *', async () => {
      console.log('T√¢che cron : g√©n√©ration automatique des KPIs...');
      try {
        await genererKpisQuotidiens();
        console.log('KPIs g√©n√©r√©s avec succ√®s (cron).');
      } catch (err) {
        console.error('Erreur lors de la g√©n√©ration des KPIs (cron) :', err);
      }
    });


  } catch (err) {
    console.error('Erreur lors du d√©marrage du serveur :', err);
    process.exit(1);
  }
}

// Lancer le serveur
demarrerServeur();

const { MongoClient } = require('mongodb');
const uri = 'mongodb+srv://administrateur:STUDI2025!@cluster0.ygqxdsj.mongodb.net/?retryWrites=true&w=majority';

async function test() {
  const client = new MongoClient(uri);
  try {
    await client.connect();
    const db = client.db('plateforme_covoiturage');
    const kpis = db.collection('kpi_journalier');
    const docs = await kpis.find({}).toArray();
    console.log(docs);
  } finally {
    await client.close();
  }
}

test();