<?php

namespace App\Controller;

use App\Entity\Utilisateur;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use App\Service\MailService;


class RegistrationController extends AbstractController
{
    #[Route('/api/register', name: 'api_register', methods: ['POST'])]
    public function register(
        Request $request,
        EntityManagerInterface $entityManager,
        UserPasswordHasherInterface $passwordHasher,
		MailService $mailService
    ): JsonResponse {
        $data = json_decode($request->getContent(), true);
		
		
		// Gestion des erreurs
        if (!isset($data['email'], $data['password'], $data['pseudo'])) {
            return new JsonResponse(['error' => 'Email, pseudo et mot de passe requis'], 400);
        }

        $existingUser = $entityManager->getRepository(Utilisateur::class)->findOneBy(['pseudo' => $data['pseudo']]);
        if ($existingUser) {
            return new JsonResponse(['error' => 'Ce pseudo est d√©j√† utilis√©'], 400);
        }

        $existingUserEmail = $entityManager->getRepository(Utilisateur::class)->findOneBy(['email' => $data['email']]);
        if ($existingUserEmail) {
            return new JsonResponse(['error' => 'Cet email est d√©j√† utilis√©'], 400);
        }

		// Cr√©ation du User
        $user = new Utilisateur();
        $user->setEmail($data['email']);
        $user->setPseudo($data['pseudo']);
        $user->setRole(3);
        $user->setPrivilege(3);
		$user->setCredit(20);				// Ajout de 20 cr√©dits lors de la cr√©ation
        $hashedPassword = $passwordHasher->hashPassword($user, $data['password']);
        $user->setPassword($hashedPassword);

        // Cr√©ation du profil utilisateur dans la BDD
        $entityManager->persist($user);
        $entityManager->flush();

		// Envoi du mail de confirmation
        $mailService->send(
            $user->getEmail(),
            "Confirmation de r√©servation & Facturation - Covoiturage",
            sprintf("Bonjour %s,

Votre profil a bien √©t√© cr√©e dans l'application Ecoride.

üóì Date de cr√©ation : %s
ü™™ Pseudo : %s
üì© Adresse email : %s

Votre mot de passe n'est pas communiqu√© par raison de s√©curit√©.
En cas d'oubli de vos identifiants, cliquer sur 'Mot de passe oubli√©' dans la page de connexion.

Vous pouvez d√©sormais utiliser la totalit√© des fonctionnalit√©s de l'application et √©galement compl√©ter votre profil dans l'onglet 'Compte Utilisateur'.

Merci pour votre confiance et bon trajet !

L‚Äô√©quipe EcoRide",

                $user->getPseudo(),
                (new \DateTimeImmutable())->format('d/m/Y'),
                $user->getPseudo(),
                $user->getEmail()
            )
        );



        return new JsonResponse(['message' => 'Utilisateur cr√©√© avec succ√®s'], 201);
    }
}
