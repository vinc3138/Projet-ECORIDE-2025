import React, { useEffect, useState } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';

const apiKey = "5b3ce3597851110001cf62483d42dd8e7c144183b22a1e4f3d4e1279";

const MapComponent = ({ departCity, departAddress, arriveeCity, arriveeAddress }) => {
  const [map, setMap] = useState(null);
  const [routeLayers, setRouteLayers] = useState([]);
  const [infos, setInfos] = useState("");

  // Fonction pour géocoder une adresse complète via l'API ORS
  async function geocode(query) {
    if (!query) return null;
    const url = `https://api.openrouteservice.org/geocode/search?api_key=${apiKey}&text=${encodeURIComponent(query)}&boundary.country=FR`;
    const res = await fetch(url);
    if (!res.ok) return null;
    const data = await res.json();
    if (data.features.length === 0) return null;
    // ORS renvoie coords en [lng, lat], Leaflet veut [lat, lng]
    return data.features[0].geometry.coordinates.reverse();
  }

  // Fonction pour calculer et afficher la route
  async function calculateRoute(startCoords, endCoords) {
    if (!startCoords || !endCoords) return;

    const bodyData = {
      coordinates: [
        [startCoords[1], startCoords[0]], // lng, lat
        [endCoords[1], endCoords[0]]
      ]
    };

    const response = await fetch("https://api.openrouteservice.org/v2/directions/driving-car/geojson", {
      method: "POST",
      headers: {
        Authorization: apiKey,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(bodyData)
    });

    if (!response.ok) {
      setInfos("Erreur lors du calcul de l'itinéraire");
      return;
    }

    const data = await response.json();

    // Supprimer anciennes routes affichées
    routeLayers.forEach(layer => layer.remove());

    // Afficher la nouvelle route
    const newLayer = L.geoJSON(data.features[0], { style: { color: 'blue', weight: 5 } }).addTo(map);
    setRouteLayers([newLayer]);

    // Centrer la carte sur la route
    map.fitBounds(newLayer.getBounds());

    // Afficher distance et durée
    const summary = data.features[0].properties.summary;
    const distanceKm = (summary.distance / 1000).toFixed(1);
    const durationMin = Math.round(summary.duration / 60);
    setInfos(`Distance: ${distanceKm} km, Durée: ${Math.floor(durationMin / 60)}h ${durationMin % 60} min`);
  }

  // Initialiser la carte
  useEffect(() => {
    if (!map) {
      const leafletMap = L.map('map').setView([48.8566, 2.3522], 6);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
      }).addTo(leafletMap);
      setMap(leafletMap);
      return () => leafletMap.remove();
    }
  }, [map]);

  // Quand les inputs changent, recalculer la route
  useEffect(() => {
    async function fetchRoute() {
      if (departCity && arriveeCity && departAddress && arriveeAddress && map) {
        const startCoords = await geocode(`${departAddress}, ${departCity}`);
        const endCoords = await geocode(`${arriveeAddress}, ${arriveeCity}`);

        if (startCoords && endCoords) {
          calculateRoute(startCoords, endCoords);
        } else {
          setInfos("Impossible de géolocaliser les adresses.");
        }
      }
    }
    fetchRoute();
  }, [departCity, departAddress, arriveeCity, arriveeAddress, map]);

  return (
    <>
      <div id="map" style={{ height: '300px', width: '100%', marginBottom: '1rem' }}></div>
      <div id="infos" className="mb-2 small text-muted">{infos}</div>
    </>
  );
};

export default MapComponent;
