import React, { useState } from 'react';
import { checkPasswordSecurity } from '../utils/passwordCheck';

export default function Inscription() {
  
  const API_URL = import.meta.env.VITE_API_URL;
  
  const [pseudo, setPseudo] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');
  const [error, setError] = useState('');
  const [securityMessage, setSecurityMessage] = useState('');
  const [securityColor, setSecurityColor] = useState('');

  const [loading, setLoading] = useState(false);

  const handlePasswordChange = (value) => {
    setPassword(value);

    const { message, color } = checkPasswordSecurity(value);
    setSecurityMessage(message);
    setSecurityColor(color);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
console.log(token);
    try {
      setLoading(true);
	  const res = await fetch(`${API_URL}/api/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password, pseudo, role_id: 2, privilege_id: 3 }),
      });

      const data = await res.json();

      if (res.ok) {
        setMessage("Inscription r√©ussie !");
		setLoading(false);
        setError('');
      } else {
        setError(data.message || "Une erreur est survenue. Le mail ou le pseudo est d√©j√† utilis√©.");
        setLoading(false);
		setMessage('');
      }
    } catch (err) {
	  setError("Erreur serveur");
	  setLoading(false);
      setMessage('');
    }
  };

  return (
    <div className="container">
		
		<h2>Inscription</h2>

		{error && <div className="alert alert-danger">{error}</div>}
		{message && <div className="alert alert-success">{message}</div>}

		<form onSubmit={handleSubmit}>

			  <div className="row mb-4">
				<div className="col-12">
				  <label htmlFor="pseudo" className="form-label">Pseudo :</label>
				  <input
					type="text"
					className="form-control"
					id="pseudo"
					value={pseudo}
					onChange={e => setPseudo(e.target.value)}
					required
				  />
				</div>
			  </div>

			  <div className="row mb-4">
				<div className="col-12">
				  <label htmlFor="email" className="form-label">Email :</label>
				  <input
					type="email"
					className="form-control"
					id="email"
					value={email}
					onChange={e => setEmail(e.target.value)}
					required
				  />
				</div>
			  </div>

			  <div className="row mb-4">
				<div className="col-12">
				  <label htmlFor="password" className="form-label">Mot de passe :</label>
				  <input
					type="password"
					className="form-control"
					id="password"
					value={password}
					onChange={e => handlePasswordChange(e.target.value)}
					required
				  />
				  {securityMessage && <small className={`form-text ${securityColor}`}>{securityMessage}</small>}
				</div>
			  </div>

			  <div className="row justify-content-start">
				<div className="col-6 col-md-3">
				  <button type="submit" className="btn btn-success w-100">S'inscrire</button>
				</div>
			  </div>

		</form>
		
		{/* üîÑ Loading */}
		<div className="mt-4">
		{loading && (
		  <div className="text-center mt-5">
			<div className="spinner-border text-primary" role="status" />
			<p className="mt-3">Chargement en cours...</p>
		  </div>
		)}
		</div>
		
    </div>
  );
}
