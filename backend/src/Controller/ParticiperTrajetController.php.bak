<?php

namespace App\Controller;

use App\Entity\Reservation;
use App\Entity\StatutReservation;
use App\Repository\CovoiturageRepository;
use App\Service\MailService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\SecurityBundle\Security;
use SymfonyCasts\Bundle\ResetPassword\Helper\ResetPasswordHelperInterface;


class ParticiperTrajetController extends AbstractController
{
    #[Route('/api/trajets/{id}/participer', name: 'trajet_participer', methods: ['POST'])]
    public function participer(
        int $id,
        Security $security,
        CovoiturageRepository $trajetRepository,
        EntityManagerInterface $em,
        MailService $mailService
    ): JsonResponse {

        $user = $security->getUser();

        if (!$user) {
            return new JsonResponse(['error' => 'Utilisateur non connectÃ©'], 401);
        }

        $privilegeId = $user->getPrivilege();
        if (!in_array($privilegeId, [2, 3])) {
            return new JsonResponse(['error' => 'AccÃ¨s interdit : privilÃ¨ges insuffisants'], 403);
        }

        $trajet = $trajetRepository->find($id);

        if (!$trajet) {
            return new JsonResponse(['error' => 'Trajet non trouvÃ©'], 404);
        }

        if ($trajet->getNbPlace() <= 0) {
            return new JsonResponse(['error' => 'Aucune place disponible'], 400);
        }

        $prix = $trajet->getPrixPassager();

        if ($user->getCredit() < $prix) {
            return new JsonResponse(['error' => 'CrÃ©dit insuffisant'], 400);
        }

        $reservation = new Reservation();
        $reservation->setUtilisateur($user);
        $reservation->setCovoiturage($trajet);
        $reservation->setNbPlacesReservees(1);

        // Utilisation correcte de $em
        $statutReservation = $em->getRepository(StatutReservation::class)->find(1);

        if (!$statutReservation) {
            throw $this->createNotFoundException('Statut non trouvÃ©.');
        }

        $reservation->setStatutReservation($statutReservation);
        $reservation->setPaiementRealise(0);
        $reservation->setAvisRedige(0);
        $reservation->setNoteEnvoye(0);

        // Mise Ã  jour des places disponibles et crÃ©dit utilisateur
        $trajet->setNbPlace($trajet->getNbPlace() - 1);
        $user->setCredit($user->getCredit() - $prix);

        $em->persist($reservation);
        $em->flush();

        $mailService->send(
            $user->getEmail(),
            "Confirmation de rÃ©servation & Facturation - Covoiturage",
            sprintf("Bonjour %s,

Votre rÃ©servation pour le trajet %s â†’ %s est confirmÃ©e.

ðŸ—“ Date : %s Ã  %s
ðŸš— Chauffeur : %s

ðŸ’° Facturation :
- Prix : %.2f â‚¬
- Paiement : CrÃ©dit utilisateur
- Nouveau solde : %.2f â‚¬

Merci pour votre confiance et bon trajet !

Lâ€™Ã©quipe EcoRide",

                $user->getPseudo(),
                $trajet->getVilleDepart(),
                $trajet->getVilleArrivee(),
                $trajet->getDateDepart()->format('d/m/Y'),
                $trajet->getHeureDepart()->format('H:i'),
                $trajet->getChauffeur()->getPseudo(),
                $prix,
                $user->getCredit()
            )
        );

        return new JsonResponse([
            'success' => true,
            'message' => 'Participation enregistrÃ©e et confirmation envoyÃ©e.',
            'nouveau_credit' => $user->getCredit()
        ]);
    }
}
