/* Imports */
import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/authToken';



/* Param√©trage du header */
export default function Header() {
	
	// Constante pour r√©cup√©rer depuis la fonction les donn√©es utilisateur et la fonction de d√©connexion
    const { user, logout } = useAuth();

    // Constante pour le statut de connexion de l'utilisateur (Vrai / Faux)
	const isLoggedIn = !!user;

	// Constante pour r√©cup√©rer le privil√®ge depuis le hook
    const privilegeId = user?.privilege || null;

	// Constante navigate pour permettre la redirection
	const navigate = useNavigate();

    // Constante pour le message de notification
    const [message, setMessage] = useState('');

	// Constante pour le logout et la redirection vers la page d'accueil
	const handleLogout = () => {
		logout();
		
		setMessage('Vous avez bien √©t√© d√©connect√©');
		// Efface le message apr√®s 10 secondes (10000 ms)
		setTimeout(() => setMessage(''), 10000);
		
		
		navigate('/');
	};



	// D√©finition des pages avec le typage Publique / Priv√© et les condtions d'affichage li√©es aux privil√®ges
	const navLinks = [
		{ to: '/', label: 'Accueil', public: true },
		{ to: '/recherchetrajet', label: 'Rechercher un trajet', public: true },
		{ to: '/apropos', label: '√Ä propos', public: true },
		{ to: '/inscription', label: "S'inscrire", public: true, hideIfLoggedIn: true },
		
		{ to: '/compteutilisateur', label: 'Compte Utilisateur', privilege: [3], private: true },
		{ to: '/compteemploye', label: 'Compte Employ√©', privilege: [2], private: true },
		{ to: '/compteadministrateur', label: 'Compte Administrateur', privilege: [1], private: true },
		{ to: '/historiquetrajet', label: 'Historique Trajet', privilege: [3], private: true },
	];

	// D√©finition des pages publiques
	const publicLinks = navLinks.filter(link => {
		// Faux si le lien doit √™tre cach√© pour un utilisateur connect√©
		if (link.public) {
		    if (link.hideIfLoggedIn && isLoggedIn) return false;
			return true;
		}
		return false;
	});

	// D√©finition des pages priv√©es : si non publique, utilisateur connect√© et privil√®ge ok
	const privateLinks = navLinks.filter(link => {
		return !link.public && isLoggedIn && link.privilege?.includes(privilegeId);
	});

	// Affichage du Header en Front
	return (
		<header>
		  {/* Ent√™te de page */}
		  <div style={{ display: 'flex', alignItems: 'center', gap: '1rem', width: '100%' }}>
			
			{/* Logo + nom Ecoride */}
			<img src="/Pictures/LOGO_ECORIDE.png" className="logo_display rounded ms-5" alt="Logo EcoRide"/>
			<h1 className="navbar-brand mb-0">EcoRide</h1>
			
			{/* Navbar */}
			<div className="wrapper" style={{ flexGrow: 1, display: 'flex', alignItems: 'center', gap: '1rem' }}>
			  <nav className="nav" style={{ display: 'flex', gap: '1rem', flexGrow: 1 }}>
			  
				{/* Afficher les pages publiques */}
				{publicLinks.map(link => (
				  <Link key={link.to} to={link.to}>{link.label}</Link>
				))}
			  
			  </nav>

			  {/* Si connect√©, afficher : pseudo + pages personnalis√©es + D√©connexion */}
			  {isLoggedIn ? (
				<div style={{ display: 'flex', alignItems: 'center', gap: '1rem', fontWeight: 'bold', marginRight: '13%' }}>
				  <span>üë§ {user.pseudo || user.username}</span>
				  
				  {privateLinks.map(link => (
					<Link key={link.to} to={link.to}>{link.label}</Link>
				  ))}
				  
				  <span style={{ cursor: 'pointer' }} onClick={handleLogout}>Se d√©connecter</span>
				</div>
			  ) : (
				// Si non connect√©, afficher Connexion
				<div style={{ marginLeft: 'auto', marginRight: '20%' }}>
				  <Link to="/connexion">Se connecter</Link>
				</div>
			  )}
			</div>
		  </div>
		  
		  {/* Message temporaire de d√©connexion */}
		  {message && (
			<div style={{
			  position: 'fixed',
			  top: 10,
			  right: 10,
			  backgroundColor: '#4caf50',
			  color: 'white',
			  padding: '10px 20px',
			  borderRadius: '5px',
			  zIndex: 9999,
			  boxShadow: '0 0 10px rgba(0,0,0,0.3)'
			}}>
			  {message}
			</div>
		  )}
		</header>
	);
}
