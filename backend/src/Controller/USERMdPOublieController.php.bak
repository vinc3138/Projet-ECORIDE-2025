<?php

namespace App\Controller;

use App\Repository\UtilisateurRepository;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Mime\Email;
use Symfony\Component\Mailer\MailerInterface;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
use SymfonyCasts\Bundle\ResetPassword\Helper\ResetPasswordHelperInterface;
use SymfonyCasts\Bundle\ResetPassword\Exception\ResetPasswordExceptionInterface;


class USERMdPOublieController extends AbstractController
{
	#[Route('/api/forgot-password', name: 'forgot-password', methods: ['POST'])]
	public function requestReset(
		Request $request,
		UtilisateurRepository $userRepository,
		ResetPasswordHelperInterface $resetPasswordHelper,
		MailerInterface $mailer
	): JsonResponse {
		$data = json_decode($request->getContent(), true);
		$email = $data['email'] ?? null;

		$user = $userRepository->findOneBy(['email' => $email]);

		if (!$user) {
			return new JsonResponse(['message' => 'Si votre email existe, vous recevrez un lien.'], 200);
		}

		$resetToken = $resetPasswordHelper->generateResetToken($user);

		$emailMessage = (new Email())
			->from('no-reply@ecoride.com')
			->to($user->getEmail())
			->subject('R√©initialisation de votre mot de passe')
			->text(sprintf("Bonjour %s,

	Une demande de r√©initialisation de mot de passe a √©t√© effectu√©e pour votre compte.

	üëâ Pour d√©finir un nouveau mot de passe, cliquez sur le lien suivant :
	%s/reset-password?token=%s

	‚ö†Ô∏è Ce lien est valable pendant 1 heure. Si vous n'√™tes pas √† l'origine de cette demande, ignorez simplement cet e-mail.

	L‚Äô√©quipe EcoRide",
				$user->getFirstname(),
				"https://ton-frontend.com", // √† personnaliser
				$resetToken->getToken()
			));

		$mailer->send($emailMessage);

		return new JsonResponse(['message' => 'Email envoy√©'], 200);
	}

	public function resetPassword(Request $request, ResetPasswordHelperInterface $resetPasswordHelper, UserPasswordHasherInterface $passwordHasher, EntityManagerInterface $em): JsonResponse
	{
		$data = json_decode($request->getContent(), true);
		$token = $data['token'] ?? null;
		$newPassword = $data['password'] ?? null;

		if (!$token || !$newPassword) {
			return new JsonResponse(['error' => 'Token et mot de passe requis'], 400);
		}

		try {
			$user = $resetPasswordHelper->validateTokenAndFetchUser($token);
		} catch (ResetPasswordExceptionInterface $e) {
			return new JsonResponse(['error' => $e->getReason()], 400);
		}

		// Supprimer la requ√™te de r√©initialisation
		$resetTokenObject = $resetPasswordHelper->getResetToken($token);
		$resetPasswordHelper->removeResetRequest($resetTokenObject);

		$user->setPassword($passwordHasher->hashPassword($user, $newPassword));
		$em->flush();

		return new JsonResponse(['message' => 'Mot de passe r√©initialis√© avec succ√®s'], 200);
	}

}